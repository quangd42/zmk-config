/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2

&mt { quick-tap-ms = <150>; };

&sl { /delete-property/ quick-release; };

&gresc {
    keep-mods = <(MOD_RSFT|MOD_LGUI|MOD_LCTL)>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
};

/ {
    chosen { zmk,matrix_transform = &layout_grid_transform; };

    behaviors {
        lh_hm: lh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <75>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59>;
        };

        rh_hm: rh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <75>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 38 40 37 38 39 40 49 50 51 52 48 49 50 51 52 53 54 55 56 57 58 59 41>;
            hold-trigger-on-release;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHFT";
            bindings = <&quick_sk RSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        quick_sk: quick_sk {
            compatible = "zmk,behavior-sticky-key";
            label = "QUICK_STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <900>;
            quick-release;
        };

        quick_hold_tap: quick_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_HOLD_TAP";
            bindings = <&quick_sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
        };

        lh_lt: lh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 50 51 52 53 54 55 56 57 58 59 30 34 35 43 44 45 46 47 48 49 56 57 58 59 42>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        rh_lt: rh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 51 52 53 54 55 56 57 58 59 29 41 49 48 50>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        grave_escape: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            keep-mods = <(MOD_RSFT|MOD_LCTL|MOD_LGUI)>;
            mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL|MOD_LALT|MOD_RALT)>;
        };

        layer_gresc: layer_gresc {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_GRESC";
            bindings = <&mo>, <&grave_escape>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        dot_end_sentence: dot_end_sentence {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_END_SENTENCE";
            bindings = <&kp DOT>, <&end_sentence>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        spc_end_sent: spc_end_sent {
            compatible = "zmk,behavior-mod-morph";
            label = "SPC_END_SENT";
            bindings = <&lt 5 SPACE>, <&end_sentence>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_semi_flsh: m_semi_flsh {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SEMI_FLSH";
            bindings = <&kp SEMI>, <&kp FSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LGUI|MOD_LCTL|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT)>;
        };

        layer_repeat: layer_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_REPEAT";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        m_question_comment: m_question_comment {
            compatible = "zmk,behavior-mod-morph";
            label = "M_QUESTION_COMMENT";
            bindings = <&kp FSLH>, <&end_question>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        lh_hm_quick: lh_hm_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LH_HM_QUICK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <47 46 53 54 55 58 59>;
        };

        ad_z: adaptive_z {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_Z";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp O>,
                <&kp Y>,
                <&kp Y>,
                <&kp U>,
                <&kp Y>,
                <&kp S>,
                <&kp L>,
                <&kp K>,
                <&kp A>,
                <&kp Y>,
                <&str_ue>,
                <&kp L>,
                <&kp K>,
                <&str_ment>,
                <&kp E>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <A C D E G J K L O P Q R S T U Y>;
        };

        ad_b: adaptive_b {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_B";
            #binding-cells = <0>;
            defaults = <&kp B>;
            bindings =
                <&kp Y>,
                <&kp Y>,
                <&kp Y>,
                <&kp L>,
                <&kp K>,
                <&kp Y>,
                <&str_ue>,
                <&kp K>,
                <&str_ment>;

            max-delay-ms = <500>;
            antecedents = <C D G K L P Q S T>;
        };

        ad_m: adaptive_m {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_M";
            #binding-cells = <0>;
            defaults = <&kp M>;
            bindings = <&kp K>;
            max-delay-ms = <300>;
            antecedents = <C>;
        };

        ad_q: ad_q {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Q";
            #binding-cells = <0>;
            defaults = <&kp Q>;
            bindings = <&kp Y>, <&kp Y>, <&kp Y>;

            max-delay-ms = <500>;
            antecedents = <G L M>;
        };

        ad_j: ad_j {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_J";
            #binding-cells = <0>;
            defaults = <&kp J>;
            bindings = <&kp P>, <&kp S>, <&kp Y>;

            max-delay-ms = <500>;
            antecedents = <M Y S>;
        };

        ad_z2: ad_z2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z2";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp Y>,
                <&kp Y>,
                <&kp Y>,
                <&kp Y>,
                <&kp T>,
                <&kp W>,
                <&kp L>;

            max-delay-ms = <300>;
            antecedents = <C G L M P S R>;
        };

        ad_k: ad_k {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_K";
            #binding-cells = <0>;
            defaults = <&kp K>;
            bindings = <&kp S>;
            max-delay-ms = <500>;
            antecedents = <Y>;
        };

        ad_z3: ad_z3 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z3";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp K>,
                <&kp K>,
                <&kp Y>,
                <&kp S>,
                <&kp P>,
                <&kp T>,
                <&kp L>;

            max-delay-ms = <400>;
            antecedents = <C L S Y M P R>;
        };

        ad_z_can2b2: ad_z_can2b2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z_CAN2B2";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp Y>,
                <&kp L>,
                <&kp K>,
                <&kp S>,
                <&kp S>,
                <&kp S>,
                <&kp M>,
                <&str_px>,
                <&kp H>,
                <&kp A>,
                <&kp E>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <C R L G W M S N P O U X>;
        };

        layer_switcher: layer_switcher {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_SWITCHER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        m_sqt_minus: m_sqt_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SQT_MINUS";
            bindings = <&kp SQT>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LGUI|MOD_LALT)>;
            keep-mods = <(MOD_LSFT|MOD_LGUI)>;
        };

        m_comma_lt: m_comma_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "M_COMMA_LT";
            bindings = <&kp COMMA>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        m_dot_gt: m_dot_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "M_DOT_GT";
            bindings = <&kp DOT>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        ad_q_can2b2: ad_q_can2b2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Q_CAN2B2";
            #binding-cells = <0>;
            defaults = <&kp Q>;
            bindings = <&kp L>, <&str_returns_q>;

            max-delay-ms = <500>;
            antecedents = <R L>;
        };

        ad_z_maya: ad_z_maya {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z_MAYA";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp C>,
                <&kp E>,
                <&kp A>,
                <&kp S>,
                <&kp L>,
                <&kp Y>,
                <&kp Y>,
                <&kp Y>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <S U O G R F P H Y>;
        };
    };

    macros {
        up_dir: up_dir {
            compatible = "zmk,behavior-macro";
            label = "UP_DIR";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
            wait-ms = <40>;
            tap-ms = <4>;
        };

        end_sentence: end_sentence {
            compatible = "zmk,behavior-macro";
            label = "END_SENTENCE";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &quick_sk LSHFT>;
            wait-ms = <30>;
            tap-ms = <30>;
        };

        end_question: end_question {
            compatible = "zmk,behavior-macro";
            label = "END_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp QMARK &kp SPACE &quick_sk LSHFT>;
            tap-ms = <30>;
            wait-ms = <30>;
        };

        lang_switch: lang_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 3 &kp RA(SPACE)>;
            label = "LANG_SWITCH";
            wait-ms = <40>;
            tap-ms = <40>;
        };

        str_ment: str_ment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp E &kp N &kp T>;
            label = "STR_MENT";
            wait-ms = <30>;
            tap-ms = <4>;
        };

        str_efore: str_efore {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp F &kp O &kp R &kp E>;
            label = "STR_EFORE";
            wait-ms = <30>;
            tap-ms = <4>;
        };

        str_ue: str_ue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp E>;
            label = "STR_UE";
            wait-ms = <30>;
            tap-ms = <4>;
        };

        vim_nav_i: vim_nav_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 8 &kp I>;
            label = "VIM_NAV_I";
        };

        vim_nav_o: vim_nav_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 8 &kp O>;
            label = "VIM_NAV_O";
        };

        vim_nav_a: vim_nav_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 8 &kp A>;
            label = "VIM_NAV_A";
        };

        str_px: str_px {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp X>;
            label = "STR_PX";
            wait-ms = <30>;
            tap-ms = <4>;
        };

        str_returns_q: str_return_q {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSPC &kp Q>;
            label = "STR_RETURN_Q";
        };
    };

    combos {
        compatible = "zmk,combos";

        one_hand_mode {
            bindings = <&to 5>;
            key-positions = <40 53>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        canary2b2 {
            bindings = <
&kp N1               &kp N2         &kp N3            &kp N4         &kp N5     &lang_switch  &kp LG(LC(Q))  &kp N6        &kp N7          &kp N8          &kp N9         &kp N0
&kp Y                &lh_lt 5 L     &lh_lt 6 D        &kp W          &kp V      &kp DOWN      &kp UP         &kp X         &kp B           &kp O           &rh_lt 5 U     &kp COMMA
&lh_hm LCTRL C       &lh_hm LALT R  &lh_hm LSHFT T    &lh_hm LCMD S  &kp G      &kp LEFT      &kp RIGHT      &kp P         &rh_hm RCMD N   &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I
&ad_z_can2b2         &kp J          &kp K             &kp M          &kp F      &kp LBKT      &kp RBKT       &ad_q_can2b2  &kp H           &kp SQT         &kp SEMI       &kp DOT
&layer_switcher 4 4  &none          &layer_gresc 7 0  &lt 8 SPACE    &lt 5 TAB  &lt 7 ENTER   &lt 7 ENTER    &lt 5 RET     &mt RSHFT BSPC  &smart_shft     &kp MINUS      &kp EQUAL
            >;
        };

        stirred_layer {
            //  -------------------------------------------------------------------------------------------------
            // |  GRAV |  1   |  2   |  3   |  4    |  5     |   6     |  7     |  8   |  9    |   0   | BSPC   |
            // |  TAB  |  Q   |  W   |  E   |  R    |  T     |   Y     |  U     |  I   |  O    |   P   | DEL    |
            // |  ESC  |  A   |  S   |  D   |  F    |  G     |   H     |  J     |  K   |  L    |   ;   |  '     |
            // | SHIFT |  Z   |  X   |  C   |  V    |  B     |   N     |  M     |  ,   |  .    |   /   | RET    |
            // |       | LGUI | LALT | LCTL | LOWER | SPACE  |  SPACE  |  RAISE | LEFT |  DOWN |   UP  | RIGHT  |

            bindings = <
&kp N1               &kp N2         &kp N3            &kp N4         &kp N5     &lang_switch  &kp LG(LC(Q))  &kp N6     &kp N7          &kp N8          &kp N9         &kp N0
&kp B                &lh_lt 5 L     &lh_lt 6 D        &kp W          &kp Q      &kp DOWN      &kp UP         &kp J      &kp K           &kp O           &rh_lt 5 U     &kp COMMA
&lh_hm LCTRL N       &lh_hm LALT R  &lh_hm LSHFT T    &lh_hm LCMD S  &kp G      &kp LEFT      &kp RIGHT      &kp F      &rh_hm RCMD H   &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I
&ad_z_maya           &kp X          &kp M             &kp C          &kp V      &kp LBKT      &kp RBKT       &kp P      &kp Y           &kp SQT         &kp SEMI       &kp DOT
&layer_switcher 4 4  &none          &layer_gresc 7 0  &lt 8 SPACE    &lt 5 TAB  &lt 7 ENTER   &lt 7 ENTER    &lt 5 RET  &mt RSHFT BSPC  &smart_shft     &kp MINUS      &kp EQUAL
            >;

            label = "stirred";
        };

        vnmak_layer {
            bindings = <
&kp N1          &kp N2         &kp N3            &kp N4         &kp N5     &trans       &trans       &kp N6     &kp N7          &kp N8          &kp N9         &kp N0
&kp G           &kp T          &lh_lt 6 D        &kp Q          &kp F      &kp DOWN     &kp UP       &kp DOT    &kp U           &kp E           &kp Y          &kp B
&lh_hm LCTRL C  &lh_hm LALT N  &lh_hm LSHFT H    &lh_hm LCMD S  &kp R      &kp LEFT     &kp RIGHT    &kp COMMA  &rh_hm RCMD I   &rh_hm RSHFT A  &rh_hm RALT O  &rh_hm RCTRL W
&kp V           &kp L          &kp M             &kp X          &kp J      &kp LBKT     &kp RBKT     &kp Z      &kp SEMI        &kp SQT         &kp P          &kp K
&trans          &none          &layer_gresc 7 0  &lt 8 SPACE    &lt 5 TAB  &lt 7 ENTER  &lt 7 ENTER  &lt 5 RET  &mt RSHFT BSPC  &smart_shft     &kp MINUS      &kp EQUAL
            >;

            label = "vnmak2";
        };

        qwerty_layer {
            bindings = <
&kp N1  &kp N2  &kp N3            &kp N4       &kp N5     &trans       &trans       &kp N6     &kp N7          &kp N8       &kp N9     &kp N0
&kp Q   &kp W   &lh_lt 6 E        &kp R        &kp T      &kp DOWN     &kp UP       &kp Y      &kp U           &kp I        &kp O      &kp P
&kp A   &kp S   &kp D             &kp F        &kp G      &kp LEFT     &kp RIGHT    &kp H      &kp J           &kp K        &kp L      &kp SEMI
&kp Z   &kp X   &kp C             &kp V        &kp B      &kp LBKT     &kp RBKT     &kp N      &kp M           &kp COMMA    &kp DOT    &kp FSLH
&trans  &none   &layer_gresc 7 0  &lt 8 SPACE  &lt 5 TAB  &lt 7 ENTER  &lt 7 ENTER  &lt 5 RET  &mt RSHFT BSPC  &smart_shft  &kp MINUS  &kp EQUAL
            >;
        };

        vim_nav_layer {
            bindings = <
&kp N1                &kp N2        &kp N3     &kp N4     &kp N5   &none      &none      &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
&kp LS(LA(LC(LCMD)))  &sk LC(LCMD)  &mo 6      &none      &none    &none      &none      &none      &kp LC(D)  &kp LC(U)  &none      &none
&sk LCTRL             &sk LALT      &sk LSHFT  &sk LGUI   &none    &none      &none      &kp H      &kp J      &kp K      &kp L      &none
&none                 &none         &none      &none      &none    &none      &none      &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none
&trans                &none         &kp ESC    &kp SPACE  &kp TAB  &kp ENTER  &kp ENTER  &kp ENTER  &kp BSPC   &kp DEL    &none      &none
            >;
        };

        code_sym_layer {
            bindings = <
&kp N1             &kp N2           &kp N3             &kp N4             &kp N5    &none  &none  &kp N6     &kp N7             &kp N8             &kp N9            &kp N0
&kp GRAVE          &kp LT           &kp GT             &kp FSLH           &kp DOT   &none  &none  &kp PIPE   &kp TILDE          &kp LBKT           &kp RBKT          &kp AT
&lh_hm LCTRL EXCL  &lh_hm LALT DQT  &lh_hm LSHFT PLUS  &lh_hm LCMD EQUAL  &kp HASH  &none  &none  &kp AMPS   &rh_hm RCMD COLON  &rh_hm RSHFT LPAR  &rh_hm RALT RPAR  &rh_hm RCTRL QMARK
&kp BSLH           &kp SQT          &kp UNDER          &kp MINUS          &kp STAR  &none  &none  &kp CARET  &kp DLLR           &kp LBRC           &kp RBRC          &kp PRCNT
&trans             &none            &to 0              &kp SPACE          &mo 5     &none  &none  &mo 5      &kp BSPC           &kp DEL            &none             &none
            >;

            label = "code";
        };

        num_layer {
            // ------------------------------------------------------------------------------------------
            // |   ~   |  !   |  @   |  #   |  $   |  %   |   ^   |   &   |   *  |  (   |   )   | BSPC  |
            // |   ~   |  !   |  @   |  #   |  $   |  %   |   ^   |   &   |   *  |  (   |   )   | DEL   |
            // |  DEL  |  F1  |  F2  |  F3  |  F4  |  F5  |  F6   |   -   |   +  |  [   |   ]   |  |    |
            // |       |  F7  |  F8  |  F9  |  F10 |  F11 |  F12  |       | LCTL | HOME |  END  |       |
            // | LALT  |      |      |      |      |      |       |       | NEXT | VOL- | VOL+  | PLAY  |

            bindings = <
&none      &none      &none      &none      &none     &none     &none      &none      &none     &none    &none   &none
&kp LPAR   &kp MINUS  &none      &kp PLUS   &kp RPAR  &none     &none      &kp COLON  &kp N7    &kp N8   &kp N9  &kp ASTRK
&sk LCTRL  &sk LALT   &sk LSHFT  &sk LCMD   &none     &none     &none      &kp N0     &kp N1    &kp N2   &kp N3  &kp FSLH
&none      &none      &none      &none      &none     &none     &kp COMMA  &kp EQUAL  &kp N4    &kp N5   &kp N6  &kp DOT
&trans     &none      &kp MINUS  &kp SPACE  &kp PLUS  &kp PLUS  &kp PLUS   &kp RET    &kp BSPC  &kp DEL  &none   &kp COMMA
            >;
        };

        fun_layer {
            bindings = <
&none      &none      &none         &none           &none           &none         &none         &none    &none   &none   &none   &none
&none      &kp LG(W)  &kp LG(BSLH)  &kp LS(LG(N4))  &kp LS(LG(N5))  &kp C_VOL_DN  &kp C_VOL_UP  &kp F12  &kp F7  &kp F8  &kp F9  &none
&kp LG(A)  &none      &none         &none           &kp LG(BSLH)    &kp K_MUTE    &kp C_PP      &kp F11  &kp F1  &kp F2  &kp F3  &none
&kp LG(Z)  &kp LG(X)  &kp LG(C)     &kp LG(V)       &kp LG(LS(Z))   &kp C_BRI_DN  &kp C_BRI_UP  &kp F10  &kp F4  &kp F5  &kp F6  &none
&trans     &none      &to 0         &lt 8 SPACE     &kp RET         &none         &none         &none    &none   &mo 9   &none   &none
            >;

            label = "Fun";
        };

        nav_layer {
            bindings = <
&none                 &none         &none      &none      &none          &none    &none    &none         &none      &none      &none        &none
&sk RA(RC(RS(RGUI)))  &sk LC(LCMD)  &none      &kp LG(A)  &kp LG(LBKT)   &none    &none    &kp LS(HOME)  &kp LC(E)  &kp LC(Y)  &kp LS(END)  &vim_nav_o
&sk LCTRL             &sk LALT      &sk LSHFT  &sk LCMD   &kp LG(RBKT)   &none    &none    &kp LEFT      &kp DOWN   &kp UP     &kp RIGHT    &vim_nav_i
&kp LG(Z)             &kp LG(X)     &kp LG(C)  &kp LG(V)  &kp LS(LG(Z))  &none    &none    &kp HOME      &kp PG_DN  &kp PG_UP  &kp END      &vim_nav_a
&trans                &none         &kp ESC    &kp SPACE  &kp TAB        &kp RET  &kp RET  &kp RET       &kp BSPC   &kp DEL    &none        &none
            >;
        };

        sys_layer {
            bindings = <
&none   &none   &none   &none  &none            &none            &none            &none        &none       &none  &none  &none
&none   &none   &none   &none  &rgb_ug RGB_TOG  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none        &none       &none  &none  &none
&none   &none   &none   &none  &none            &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &none        &none       &none  &none  &none
&tog 1  &tog 2  &tog 3  &none  &none            &none            &none            &bootloader  &sys_reset  &none  &none  &none
&trans  &none   &to 0   &none  &none            &none            &none            &none        &none       &none  &none  &none
            >;
        };
    };
};
