/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2

&mt { quick-tap-ms = <150>; };

&sl { /delete-property/ quick-release; };

&gresc {
    keep-mods = <(MOD_RSFT|MOD_LGUI|MOD_LCTL)>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
};

/ {
    chosen { zmk,matrix_transform = &layout_grid_transform; };

    behaviors {
        lh_hm: lh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <75>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59>;
        };

        rh_hm: rh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <75>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 38 40 37 38 39 40 49 50 51 52 48 49 50 51 52 53 54 55 56 57 58 59 41>;
            hold-trigger-on-release;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHFT";
            bindings = <&quick_sk RSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        quick_sk: quick_sk {
            compatible = "zmk,behavior-sticky-key";
            label = "QUICK_STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <900>;
            quick-release;
        };

        quick_hold_tap: quick_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_HOLD_TAP";
            bindings = <&quick_sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
        };

        lh_lt: lh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 50 51 52 53 54 55 56 57 58 59 30 34 35 43 44 45 46 47 48 49 56 57 58 59 42>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        rh_lt: rh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 51 52 53 54 55 56 57 58 59 29 41 49 48 50>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        grave_escape: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            keep-mods = <(MOD_RSFT|MOD_LCTL|MOD_LGUI)>;
            mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL|MOD_LALT|MOD_RALT)>;
        };

        layer_gresc: layer_gresc {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_GRESC";
            bindings = <&mo>, <&grave_escape>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        m_semi_flsh: m_semi_flsh {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SEMI_FLSH";
            bindings = <&kp SEMI>, <&kp FSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LGUI|MOD_LCTL|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT)>;
        };

        layer_repeat: layer_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_REPEAT";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        lh_hm_quick: lh_hm_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LH_HM_QUICK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <47 46 53 54 55 58 59>;
        };

        layer_switcher: layer_switcher {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_SWITCHER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        m_sqt_minus: m_sqt_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SQT_MINUS";
            bindings = <&kp SQT>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LGUI|MOD_LALT)>;
            keep-mods = <(MOD_LSFT|MOD_LGUI)>;
        };

        m_comma_lt: m_comma_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "M_COMMA_LT";
            bindings = <&kp COMMA>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        m_dot_gt: m_dot_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "M_DOT_GT";
            bindings = <&kp DOT>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
    };

    macros {
        lang_switch: lang_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 3 &kp RA(SPACE)>;
            label = "LANG_SWITCH";
            wait-ms = <40>;
            tap-ms = <40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        maya_layer {
            bindings = <
&kp N1               &kp N2          &kp N3         &kp N4            &kp N5         &kp EQUAL  &kp BSLH  &kp N6          &kp N7          &kp N8         &kp N9          &kp N0
&kp LBKT             &kp B           &lh_lt 5 L     &lh_lt 6 D        &kp W          &kp Q      &kp J      &kp F           &kp O           &rh_lt 5 U     &kp COMMA       &kp RBKT
&kp MINUS             &lh_hm LCTRL N  &lh_hm LALT R  &lh_hm LSHFT T    &lh_hm LCMD S  &kp G      &kp K      &rh_hm RCMD H   &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I  &kp SEMI
&kp LG(LC(Q))        &kp Z           &kp X          &kp M             &kp C          &kp V      &kp P      &kp Y           &kp SQT         &kp FSLH       &kp DOT         &lang_switch
&layer_switcher 4 4  &none           &mo 9          &layer_gresc 7 0  &lt 8 SPACE    &kp TAB    &lt 9 RET  &mt RSHFT BSPC  &mt TAB LEFT    &kp DOWN       &kp UP          &kp RIGHT
            >;
        };

        second_layer {
            //  -------------------------------------------------------------------------------------------------
            // |  GRAV |  1   |  2   |  3   |  4    |  5     |   6     |  7     |  8   |  9    |   0   | BSPC   |
            // |  TAB  |  Q   |  W   |  E   |  R    |  T     |   Y     |  U     |  I   |  O    |   P   | DEL    |
            // |  ESC  |  A   |  S   |  D   |  F    |  G     |   H     |  J     |  K   |  L    |   ;   |  '     |
            // | SHIFT |  Z   |  X   |  C   |  V    |  B     |   N     |  M     |  ,   |  .    |   /   | RET    |
            // |       | LGUI | LALT | LCTL | LOWER | SPACE  |  SPACE  |  RAISE | LEFT |  DOWN |   UP  | RIGHT  |

            bindings = <
&kp N1  &kp N2               &kp N3         &kp N4            &kp N5         &lang_switch  &kp LG(LC(Q))  &kp N6          &kp N7          &kp N8         &kp N9          &kp N0
&none   &kp B                &lh_lt 5 L     &lh_lt 6 D        &kp W          &kp Q         &kp DOWN       &kp F           &kp O           &rh_lt 5 U     &kp COMMA       &none
&none   &lh_hm LCTRL N       &lh_hm LALT R  &lh_hm LSHFT T    &lh_hm LCMD S  &kp G         &kp LEFT       &rh_hm RCMD H   &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I  &none
&none   &kp Z                &kp X          &kp M             &kp C          &kp V         &kp LBKT       &kp Y           &kp SQT         &kp SEMI       &kp DOT         &none
&none   &layer_switcher 4 4  &none          &layer_gresc 7 0  &lt 8 SPACE    &lt 5 TAB     &lt 7 ENTER    &mt RSHFT BSPC  &smart_shft     &kp MINUS      &kp EQUAL       &none
            >;
        };

        vnmak_layer {
            bindings = <
&kp N1          &kp N2         &kp N3            &kp N4         &kp N5     &trans       &trans       &kp N6     &kp N7          &kp N8          &kp N9         &kp N0
&kp G           &kp T          &lh_lt 6 D        &kp Q          &kp F      &kp DOWN     &kp UP       &kp DOT    &kp U           &kp E           &kp Y          &kp B
&lh_hm LCTRL C  &lh_hm LALT N  &lh_hm LSHFT H    &lh_hm LCMD S  &kp R      &kp LEFT     &kp RIGHT    &kp COMMA  &rh_hm RCMD I   &rh_hm RSHFT A  &rh_hm RALT O  &rh_hm RCTRL W
&kp V           &kp L          &kp M             &kp X          &kp J      &kp LBKT     &kp RBKT     &kp Z      &kp SEMI        &kp SQT         &kp P          &kp K
&trans          &none          &layer_gresc 7 0  &lt 8 SPACE    &lt 5 TAB  &lt 7 ENTER  &lt 7 ENTER  &lt 5 RET  &mt RSHFT BSPC  &smart_shft     &kp MINUS      &kp EQUAL
            >;
        };

        qwerty_layer {
            bindings = <
&kp N1               &kp N2  &kp N3      &kp N4            &kp N5       &trans     &trans     &kp N6          &kp N7     &kp N8      &kp N9    &kp N0
&kp LBKT             &kp Q   &lh_lt 5 W  &lh_lt 6 E        &kp R        &kp T      &kp Y      &kp U           &kp I      &rh_lt 5 O  &kp P     &kp RBKT
&kp BSLH             &kp A   &kp S       &kp D             &kp F        &kp G      &kp H      &kp J           &kp K      &kp L       &kp SEMI  &kp SQT
&kp LG(LC(Q))        &kp Z   &kp X       &kp C             &kp V        &kp B      &kp N      &kp M           &kp COMMA  &kp DOT     &kp FSLH  &lang_switch
&layer_switcher 4 4  &mo 9   &none       &layer_gresc 7 0  &lt 8 SPACE  &lt 5 TAB  &lt 5 RET  &mt RSHFT BSPC  &kp LEFT   &kp DOWN    &kp UP    &kp RIGHT
            >;
        };

        vim_nav_layer {
            bindings = <
&kp N1  &kp N2        &kp N3        &kp N4       &kp N5     &none     &none      &kp N6     &kp N7     &kp N8     &kp N9  &kp N0
&none   &sk LC(LCMD)  &sk LA(LCMD)  &mo 6        &none      &none     &kp LC(E)  &kp LC(D)  &kp LC(U)  &kp LC(Y)  &none   &none
&none   &sk LCTRL     &sk LALT      &smart_shft  &sk LGUI   &kp CAPS  &kp H      &kp J      &kp K      &kp L      &none   &none
&none   &none         &none         &none        &none      &none     &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none   &none
&none   &trans        &none         &kp ESC      &kp SPACE  &kp TAB   &kp ENTER  &kp BSPC   &kp DEL    &none      &none   &none
            >;
        };

        sym_layer {
            bindings = <
&kp N1  &kp N2             &kp N3           &kp N4             &kp N5             &none     &none      &kp N6             &kp N7             &kp N8            &kp N9              &kp N0
&none   &kp GRAVE          &kp LT           &kp GT             &kp FSLH           &kp BSLH  &kp PIPE   &kp TILDE          &kp LBKT           &kp RBKT          &kp AT              &none
&none   &lh_hm LCTRL EXCL  &lh_hm LALT DQT  &lh_hm LSHFT PLUS  &lh_hm LCMD EQUAL  &kp HASH  &kp AMPS   &rh_hm RCMD COLON  &rh_hm RSHFT LPAR  &rh_hm RALT RPAR  &rh_hm RCTRL PRCNT  &none
&none   &kp BSLH           &kp BSLH         &kp UNDER          &kp MINUS          &kp STAR  &kp CARET  &kp DLLR           &kp LBRC           &kp RBRC          &kp QMARK           &none
&none   &trans             &none            &to 0              &kp SPACE          &mo 5     &mo 5      &kp BSPC           &kp DEL            &none             &none               &none
            >;
        };

        num_layer {
            // ------------------------------------------------------------------------------------------
            // |   ~   |  !   |  @   |  #   |  $   |  %   |   ^   |   &   |   *  |  (   |   )   | BSPC  |
            // |   ~   |  !   |  @   |  #   |  $   |  %   |   ^   |   &   |   *  |  (   |   )   | DEL   |
            // |  DEL  |  F1  |  F2  |  F3  |  F4  |  F5  |  F6   |   -   |   +  |  [   |   ]   |  |    |
            // |       |  F7  |  F8  |  F9  |  F10 |  F11 |  F12  |       | LCTL | HOME |  END  |       |
            // | LALT  |      |      |      |      |      |       |       | NEXT | VOL- | VOL+  | PLAY  |

            bindings = <
&none  &none      &none     &none      &none      &none    &none     &none     &none    &none   &none      &none
&none  &kp LT     &mo 6     &none      &kp GT     &none    &kp FSLH  &kp N7    &kp N8   &kp N9  &kp MINUS  &kp FSLH
&none  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LCMD   &none    &kp STAR  &kp N4    &kp N5   &kp N6  &kp PLUS   &kp STAR
&none  &none      &none     &none      &none      &none    &kp N0    &kp N1    &kp N2   &kp N3  &kp DOT    &kp COMMA
&none  &trans     &none     &kp ESC    &kp SPACE  &kp TAB  &kp RET   &kp BSPC  &kp DEL  &none   &kp COMMA  &none
            >;
        };

        fun_layer {
            bindings = <
&none  &none      &none      &none      &none           &none           &none    &none   &none       &none         &none         &none
&none  &none      &none      &none      &kp LS(LG(N4))  &kp LS(LG(N5))  &kp F12  &kp F7  &kp F8      &kp F9        &none         &none
&none  &kp LG(A)  &none      &none      &none           &kp LG(BSLH)    &kp F11  &kp F4  &kp F5      &kp F6        &none         &none
&none  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)       &kp LG(LS(Z))   &kp F10  &kp F1  &kp F2      &kp F3        &none         &none
&none  &trans     &none      &to 0      &lt 8 SPACE     &kp RET         &none    &none   &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP
            >;
        };

        nav_layer {
            bindings = <
&none  &none         &none         &none        &none      &none          &none     &none      &none      &none      &none  &none
&none  &sk LC(LCMD)  &sk LA(LCMD)  &none        &kp LG(A)  &none          &none     &none      &none      &none      &none  &none
&none  &sk LCTRL     &sk LALT      &smart_shft  &sk LCMD   &kp CLCK       &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none  &none
&none  &kp LG(Z)     &kp LG(X)     &kp LG(C)    &kp LG(V)  &kp LS(LG(Z))  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none  &none
&none  &trans        &none         &kp ESC      &kp SPACE  &kp TAB        &kp RET   &kp BSPC   &kp DEL    &none      &none  &none
            >;
        };

        sys_layer {
            bindings = <
&none  &none   &none   &none   &none            &none            &none            &none       &none  &none  &none  &none
&none  &none   &none   &none   &rgb_ug RGB_TOG  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none       &none  &none  &none  &none
&none  &none   &none   &none   &none            &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &none       &none  &none  &none  &none
&none  &tog 1  &tog 2  &tog 3  &none            &none            &bootloader      &sys_reset  &none  &none  &none  &none
&none  &trans  &none   &to 0   &none            &none            &none            &none       &none  &none  &none  &none
            >;
        };
    };
};
