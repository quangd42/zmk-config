/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

&mt { quick-tap-ms = <150>; };

&sl { /delete-property/ quick-release; };

&gresc {
    keep-mods = <(MOD_RSFT|MOD_LGUI|MOD_LCTL)>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
};

/ {
    behaviors {
        lh_hm: lh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 34 35 43 44 45 46 47 48 49 55 56 57 58 59 50 51 52 53 54>;
            require-prior-idle-ms = <75>;
        };

        rh_hm: rh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 40 39 50 51 52 53 54 55 56 57 58 59 17 29 41 42>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHFT";
            bindings = <&quick_sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        quick_sk: quick_sk {
            compatible = "zmk,behavior-sticky-key";
            label = "QUICK_STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <900>;
            quick-release;
        };

        quick_hold_tap: quick_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_HOLD_TAP";
            bindings = <&quick_sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "balanced";
        };

        lh_lt: lh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 50 51 52 53 54 55 56 57 58 59 30 34 35 43 44 45 46 47 48 49 56 57 58 59>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        rh_lt: rh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 50 51 52 53 54 55 56 57 58 59 29 41 42>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        grave_escape: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            keep-mods = <(MOD_RSFT|MOD_LCTL|MOD_LGUI)>;
            mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL|MOD_LALT|MOD_RALT)>;
        };

        layer_gresc: layer_gresc {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_GRESC";
            bindings = <&mo>, <&grave_escape>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        dot_end_sentence: dot_end_sentence {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_END_SENTENCE";
            bindings = <&kp DOT>, <&end_sentence>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        semi_end_question: semi_end_question {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_END_QUESTION";
            bindings = <&kp SEMI>, <&m_question_comment>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        layer_repeat: layer_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_REPEAT";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        m_question_comment: m_question_comment {
            compatible = "zmk,behavior-mod-morph";
            label = "M_QUESTION_COMMENT";
            bindings = <&end_question>, <&kp FSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        lh_hm_quick: lh_hm_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LH_HM_QUICK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <10>;
            hold-trigger-key-positions = <55 46 47 48>;
        };

        layer_switcher: layer_switcher {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_SWITCHER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        ad_z_can2b2: ad_z_can2b2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z_CAN2B2";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp Y>,
                <&kp L>,
                <&kp K>,
                <&kp S>,
                <&kp S>,
                <&kp S>,
                <&kp M>,
                <&str_px>,
                <&kp H>,
                <&kp A>,
                <&kp E>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <C R L G W M S N P O U X>;
        };

        ad_q_can2b2: ad_q_can2b2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Q_CAN2B2";
            #binding-cells = <0>;
            defaults = <&kp Q>;
            bindings = <&kp L>, <&str_returns_q>;

            max-delay-ms = <500>;
            antecedents = <R L>;
        };

        layer_ad_z: layer_ad_z {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_AD_Z";
            bindings = <&mo>, <&ad_z_can2b2>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <75>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49 55 56 57 58 59 50 51 52 53 54 42>;
            hold-trigger-on-release;
        };
    };

    macros {
        up_dir: up_dir {
            compatible = "zmk,behavior-macro";
            label = "UP_DIR";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
        };

        end_sentence: end_sentence {
            compatible = "zmk,behavior-macro";
            label = "END_SENTENCE";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &quick_sk LSHFT>;
            wait-ms = <30>;
            tap-ms = <30>;
        };

        end_question: end_question {
            compatible = "zmk,behavior-macro";
            label = "END_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp QMARK &kp SPACE &quick_sk LSHFT>;
            tap-ms = <30>;
            wait-ms = <30>;
        };

        lang_switch: lang_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 3 &kp LA(SPACE)>;
            label = "LANG_SWITCH";
        };

        str_px: str_px {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp X>;
            label = "STR_PX";
            wait-ms = <30>;
            tap-ms = <4>;
        };

        str_returns_q: str_return_q {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSPC &kp Q>;
            label = "STR_RETURN_Q";
        };
    };

    combos {
        compatible = "zmk,combos";

        one_hand_mode {
            bindings = <&to 8>;
            key-positions = <40 53>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp EQUAL            &kp N1           &kp N2               &kp N3            &kp N4            &kp N5                                &kp N6          &kp N7         &kp N8          &kp N9         &kp N0          &kp MINUS
&kp LBKT             &kp Y            &lh_lt 5 L           &lh_lt 6 D        &kp W             &kp V                                 &kp X           &kp B          &kp O           &rh_lt 5 U     &kp COMMA       &kp RBKT
&none                &lh_hm LCTRL C   &lh_hm LALT R        &lh_hm LSHFT T    &lh_hm LCMD S     &kp G                                 &kp P           &rh_hm RCMD N  &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I  &kp FSLH
&layer_switcher 4 4  &layer_ad_z 4 0  &kp J                &kp K             &kp M             &kp F        &kp C_MUTE    &kp C_PP   &ad_q_can2b2    &kp H          &kp SQT         &kp SEMI       &kp DOT         &lang_switch
                     &none            &layer_switcher 4 4  &layer_gresc 7 0  &layer_gresc 7 0  &lt 8 SPACE  &lt 5 TAB     &lt 5 RET  &mt RSHFT BSPC  &smart_shft    &smart_shft     &none          &none
            >;

        };

        lower_layer {
// ------------------------------------------------------------------------------------------------------------
// | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
// |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&bt BT_CLR &bt BT_SEL 0     &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3 &bt BT_SEL 4                 &trans    &trans    &trans    &trans    &trans    &trans
&kp F1     &kp F2           &kp F3            &kp F4            &kp F5       &kp F6                       &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
&kp GRAVE  &kp EXCL         &kp AT            &kp HASH          &kp DOLLAR   &kp PRCNT                    &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR  &kp TILDE
&trans     &ext_power EP_ON &ext_power EP_OFF &ext_power EP_TOG &trans       &trans    &trans   &trans    &trans    &kp MINUS &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE
                                              &trans            &trans       &trans    &trans   &trans    &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
// |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
// |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
&kp GRAVE &kp N1 &kp N2 &kp N3  &kp N4  &kp N5                       &kp N6      &kp N7    &kp N8    &kp N9   &kp N0    &trans
&kp F1    &kp F2 &kp F3 &kp F4  &kp F5  &kp F6                       &trans      &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT &trans
&kp F7    &kp F8 &kp F9 &kp F10 &kp F11 &kp F12   &trans   &trans    &kp KP_PLUS &kp MINUS &kp EQUAL &kp LBKT &kp RBKT  &kp BSLH
                        &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
