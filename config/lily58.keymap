/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt { quick-tap-ms = <150>; };

&sl { /delete-property/ quick-release; };

&gresc {
    keep-mods = <(MOD_RSFT|MOD_LGUI|MOD_LCTL)>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
};

/ {
    behaviors {
        lh_hm: lh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 34 35 43 44 45 46 47 48 49 55 56 57 58 59 50 51 52 53 54>;
            require-prior-idle-ms = <75>;
        };

        rh_hm: rh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 40 39 50 51 52 53 54 55 56 57 58 59 17 29 41 42>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHFT";
            bindings = <&quick_sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        quick_sk: quick_sk {
            compatible = "zmk,behavior-sticky-key";
            label = "QUICK_STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <900>;
            quick-release;
        };

        quick_hold_tap: quick_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_HOLD_TAP";
            bindings = <&quick_sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "balanced";
        };

        lh_lt: lh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 50 51 52 53 54 55 56 57 58 59 30 34 35 43 44 45 46 47 48 49 56 57 58 59>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        rh_lt: rh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 50 51 52 53 54 55 56 57 58 59 29 41 42>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        grave_escape: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            keep-mods = <(MOD_RSFT|MOD_LCTL|MOD_LGUI)>;
            mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL|MOD_LALT|MOD_RALT)>;
        };

        layer_gresc: layer_gresc {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_GRESC";
            bindings = <&mo>, <&grave_escape>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        dot_end_sentence: dot_end_sentence {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_END_SENTENCE";
            bindings = <&kp DOT>, <&end_sentence>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        semi_end_question: semi_end_question {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_END_QUESTION";
            bindings = <&kp SEMI>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        layer_repeat: layer_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_REPEAT";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        lh_hm_quick: lh_hm_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LH_HM_QUICK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <10>;
            hold-trigger-key-positions = <55 46 47 48>;
        };

        layer_switcher: layer_switcher {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_SWITCHER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        ad_z_can2b2: ad_z_can2b2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z_CAN2B2";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp Y>,
                <&kp L>,
                <&kp K>,
                <&kp S>,
                <&kp S>,
                <&kp S>,
                <&kp M>,
                <&str_px>,
                <&kp H>,
                <&kp A>,
                <&kp E>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <C R L G W M S N P O U X>;
        };

        ad_q_can2b2: ad_q_can2b2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Q_CAN2B2";
            #binding-cells = <0>;
            defaults = <&kp Q>;
            bindings = <&kp L>, <&str_returns_q>;

            max-delay-ms = <500>;
            antecedents = <R L>;
        };

        ad_z_maya: ad_z_maya {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z_MAYA";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp C>,
                <&kp E>,
                <&kp A>,
                <&kp S>,
                <&kp L>,
                <&kp Y>,
                <&kp Y>,
                <&kp Y>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <S U O G R F P H Y>;
        };

        ad_lbkt_maya: ad_lbkt_maya {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_LBKT_MAYA";
            #binding-cells = <0>;
            defaults = <&kp LBKT>;
            bindings =
                <&kp C>,
                <&kp E>,
                <&kp A>,
                <&kp S>,
                <&kp L>,
                <&kp Y>,
                <&kp Y>,
                <&kp Y>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <S U O G R F P H Y>;
        };
    };

    macros {
        up_dir: up_dir {
            compatible = "zmk,behavior-macro";
            label = "UP_DIR";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
        };

        end_sentence: end_sentence {
            compatible = "zmk,behavior-macro";
            label = "END_SENTENCE";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &quick_sk LSHFT>;
            wait-ms = <30>;
            tap-ms = <30>;
        };

        end_question: end_question {
            compatible = "zmk,behavior-macro";
            label = "END_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp QMARK &kp SPACE &quick_sk LSHFT>;
            tap-ms = <30>;
            wait-ms = <30>;
        };

        lang_switch: lang_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 3 &kp LA(SPACE)>;
            label = "LANG_SWITCH";
        };

        str_px: str_px {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp X>;
            label = "STR_PX";
            wait-ms = <30>;
            tap-ms = <4>;
        };

        str_returns_q: str_return_q {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSPC &kp Q>;
            label = "STR_RETURN_Q";
        };
    };

    combos {
        compatible = "zmk,combos";

        one_hand_mode {
            bindings = <&to 8>;
            key-positions = <40 53>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        maya_layer {
            bindings = <
&kp N1               &kp N2          &kp N3         &kp N4               &kp N5            &kp EQUAL                                  &kp MINUS       &kp N6         &kp N7          &kp N8         &kp N9          &kp N0
&ad_lbkt_maya        &kp B           &lh_lt 5 L     &lh_lt 6 D           &kp W             &kp Q                                      &kp J           &kp F          &kp O           &rh_lt 5 U     &kp COMMA       &kp RBKT
&kp BSLH             &lh_hm LCTRL N  &lh_hm LALT R  &lh_hm LSHFT T       &lh_hm LCMD S     &kp G                                      &kp P           &rh_hm RCMD H  &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I  &kp FSLH
&layer_switcher 4 4  &ad_z_maya      &kp X          &lh_lt 6 M           &kp C             &kp V        &kp C_VOL_DN    &kp C_VOL_UP  &kp K           &kp Y          &kp SQT         &kp SEMI       &kp DOT         &lang_switch
                                                    &layer_switcher 4 4  &layer_gresc 7 0  &lt 8 SPACE  &kp TAB         &lt 5 ENTER   &mt RSHFT BSPC  &kp TAB        &none
            >;

            label = "Maya";
        };

        can2_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp N1               &kp N2          &kp N3         &kp N4               &kp N5            &kp EQUAL                                  &kp MINUS       &kp N6         &kp N7          &kp N9         &kp N0          &kp MINUS
&kp LBKT             &kp Y           &lh_lt 5 L     &lh_lt 6 D           &kp W             &kp V                                      &kp X           &kp B          &kp O           &rh_lt 5 U     &kp COMMA       &kp RBKT
&kp BSLH             &lh_hm LCTRL C  &lh_hm LALT R  &lh_hm LSHFT T       &lh_hm LCMD S     &kp G                                      &kp P           &rh_hm RCMD N  &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I  &kp FSLH
&layer_switcher 4 4  &ad_z_can2b2    &kp J          &kp K                &kp M             &kp F        &kp C_VOL_DN    &kp C_VOL_UP  &ad_q_can2b2    &kp H          &kp SQT         &kp SEMI       &kp DOT         &lang_switch
                                                    &layer_switcher 4 4  &layer_gresc 7 0  &lt 8 SPACE  &kp TAB         &lt 5 RET     &mt RSHFT BSPC  &smart_shft    &smart_shft
            >;

            label = "Can2";
        };

        colemak_layer {
            bindings = <
&kp GRAVE  &kp N1          &kp N2         &kp N3                &kp N4               &kp N5                                     &kp N6          &kp N7         &kp N8          &kp N9              &kp N0             &lt 9 BSPC
&kp TAB    &kp Q           &kp W          &lh_lt 6 F            &kp P                &kp B                                      &kp J           &kp L          &kp U           &kp Y               &kp COMMA          &lt 0 BSPC
&trans     &lh_hm LCTRL A  &lh_hm LALT R  &lh_hm_quick LSHFT S  &lh_hm_quick LCMD T  &kp G                                      &kp M           &rh_hm RCMD N  &rh_hm RSHFT E  &rh_hm RALT I       &rh_hm RCTRL O     &dot_end_sentence
&trans     &kp Z           &kp X          &lh_lt 6 C            &kp D                &kp V        &kp C_VOL_DN    &kp C_VOL_UP  &kp K           &kp H          &kp SQT         &semi_end_question  &dot_end_sentence  &trans
                                          &trans                &layer_gresc 7 0     &lt 8 SPACE  &kp TAB         &lt 5 ENTER   &mt RSHFT BSPC  &smart_shft    &none
            >;

            label = "CmDH";
        };

        qwerty_layer {
            bindings = <
&kp N1    &kp N2  &kp N3      &kp N4      &kp N5            &kp EQUAL                                  &kp MINUS       &kp N6   &kp N7     &kp N8      &kp N9    &kp N0
&kp LBKT  &kp Q   &lh_lt 5 W  &lh_lt 6 E  &kp R             &kp T                                      &kp Y           &kp U    &kp I      &rh_lt 5 O  &kp P     &kp RBKT
&trans    &kp A   &kp S       &kp D       &kp F             &kp G                                      &kp H           &kp J    &kp K      &kp L       &kp SEMI  &kp APOS
&trans    &kp Z   &kp X       &kp C       &kp V             &kp B        &kp C_VOL_DN    &kp C_VOL_UP  &kp N           &kp M    &kp COMMA  &kp DOT     &kp FSLH  &trans
                              &trans      &layer_gresc 7 0  &lt 8 SPACE  &kp TAB         &lt 5 ENTER   &mt RSHFT BSPC  &kp TAB  &none
            >;

            label = "Qwrt";
        };

        vim_nav_layer {
            bindings = <
&kp N1  &kp N2                &kp N3        &kp N4       &kp N5    &kp EQUAL                                  &kp MINUS  &kp N6     &kp N7     &kp N8     &kp N9  &kp N0
&none   &sk LS(LA(LC(LCMD)))  &sk LC(LCMD)  &mo 6        &none     &none                                      &kp LC(E)  &kp LC(D)  &kp LC(U)  &kp LC(Y)  &none   &none
&trans  &sk LCTRL             &sk LALT      &smart_shft  &sk LCMD  &kp CLCK                                   &kp H      &kp J      &kp K      &kp L      &none   &none
&tog 4  &none                 &none         &none        &none     &none      &kp K_MUTE    &kp C_PLAY_PAUSE  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none   &kp LC(LG(Q))
                                            &none        &kp ESC   &kp SPACE  &kp TAB       &kp RET           &kp BSPC   &kp DEL    &none
            >;

            label = "Vim";
        };

        code_sym_layer {
            bindings = <
&kp N1  &kp N2             &kp N3           &kp N4             &kp N5             &none                              &none      &kp N6             &kp N7             &kp N9            &kp N0              &none
&none   &kp GRAVE          &kp LT           &kp GT             &kp FSLH           &kp DOT                            &kp PIPE   &kp TILDE          &kp LBKT           &kp RBKT          &kp AT              &none
&none   &lh_hm LCTRL EXCL  &lh_hm LALT DQT  &lh_hm LSHFT PLUS  &lh_hm LCMD EQUAL  &kp HASH                           &kp AMPS   &rh_hm RCMD COLON  &rh_hm RSHFT LPAR  &rh_hm RALT RPAR  &rh_hm RCTRL QMARK  &none
&none   &kp BSLH           &kp SQT          &kp UNDER          &kp MINUS          &kp STAR   &kp K_MUTE    &kp C_PP  &kp CARET  &kp DLLR           &kp LBRC           &kp RBRC          &kp PRCNT           &trans
                                            &none              &none              &kp SPACE  &mo 5         &mo 5     &kp BSPC   &none              &none
            >;

            label = "Code";
        };

        num_layer {
            bindings = <
&none  &none      &none      &none      &none      &none                           &none      &none    &none   &none   &none      &none
&none  &kp LPAR   &kp MINUS  &none      &kp PLUS   &kp RPAR                        &kp COLON  &kp N7   &kp N8  &kp N9  &kp ASTRK  &kp BSPC
&to 0  &sk LCTRL  &sk LALT   &sk LSHFT  &sk LCMD   &none                           &kp N0     &kp N4   &kp N5  &kp N6  &kp FSLH   &none
&none  &none      &none      &none      &none      &none      &trans      &trans   &kp EQUAL  &kp N1   &kp N2  &kp N3  &kp DOT    &trans
                             &none      &kp MINUS  &kp SPACE  &kp PLUS    &kp RET  &kp BSPC   &kp DEL  &none
            >;

            label = "Num";
        };

        fun_layer {
            bindings = <
&none  &none      &none      &none      &none           &none                                   &none    &none   &none   &none   &none  &none
&none  &none      &none      &none      &kp LS(LG(N4))  &kp LS(LG(N5))                          &kp F12  &kp F7  &kp F8  &kp F9  &none  &none
&none  &kp LG(A)  &none      &none      &none           &kp LG(BSLH)                            &kp F11  &kp F4  &kp F5  &kp F6  &none  &none
&none  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)       &kp LG(LS(Z))   &kp K_MUTE    &kp C_PP  &kp F10  &kp F1  &kp F2  &kp F3  &none  &kp LC(LG(Q))
                             &none      &to 0           &lt 8 SPACE     &kp RET       &none     &none    &mo 9   &none
            >;

            label = "Fun";
        };

        nav_layer {
            bindings = <
&none      &none                 &none         &none        &none      &none                                  &none     &none      &none      &none      &none  &none
&none      &sk LS(LA(LC(LCMD)))  &sk LC(LCMD)  &none        &kp LG(A)  &kp LG(LBKT)                           &none     &none      &none      &none      &none  &none
&kp LG(Z)  &sk LCTRL             &sk LALT      &smart_shft  &sk LCMD   &kp LG(RBKT)                           &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none  &none
&none      &kp LG(Z)             &kp LG(X)     &kp LG(C)    &kp LG(V)  &kp LS(LG(Z))  &kp K_MUTE    &kp C_PP  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none  &none
                                               &none        &to 0      &kp SPACE      &kp TAB       &kp RET   &kp BSPC  &kp DEL    &none
            >;

            label = "Nav";
        };

        sys_layer {
            bindings = <
&none  &none   &none   &none   &none         &none                           &none         &none         &none         &none         &none       &none
&none  &none   &none   &none   &none         &none                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR  &none
&none  &none   &none   &none   &none         &none                           &none         &none         &none         &none         &none       &none
&none  &tog 1  &tog 2  &tog 3  &out OUT_USB  &out OUT_BLE  &trans    &trans  &bootloader   &none         &none         &none         &none       &none
                       &none   &to 0         &none         &none     &none   &none         &none         &none
            >;

            label = "Sys";
        };
    };
};
