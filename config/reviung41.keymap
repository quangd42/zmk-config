/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define CMK 0
#define SMK 1
#define QWT 2
#define LOWER 3
#define RAISE 4
#define ADJUST 5

&mt { quick-tap-ms = <150>; };

&sl { /delete-property/ quick-release; };

/ {
    behaviors {
        lh_hm: lh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <55>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 39 38 37 36>;
        };

        rh_hm: rh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <55>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 40 39>;
            hold-trigger-on-release;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHFT";
            bindings = <&quick_sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        quick_sk: quick_sk {
            compatible = "zmk,behavior-sticky-key";
            label = "QUICK_STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <900>;
            quick-release;
        };

        quick_hold_tap: quick_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_HOLD_TAP";
            bindings = <&quick_sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "balanced";
        };

        lh_lt: lh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 36 37 38>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        rh_lt: rh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        grave_escape: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_RSFT)>;
            mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RSFT|MOD_LALT|MOD_RCTL)>;
        };

        layer_gresc: layer_gresc {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_GRESC";
            bindings = <&mo>, <&grave_escape>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        dot_end_sentence: dot_end_sentence {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_END_SENTENCE";
            bindings = <&kp DOT>, <&end_sentence>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_semi_fslh: m_semi_fslh {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SEMI_FSLH";
            bindings = <&kp SEMI>, <&kp FSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_LSFT)>;
        };

        m_question_comment: m_question_comment {
            compatible = "zmk,behavior-mod-morph";
            label = "M_QUESTION_COMMENT";
            bindings = <&kp FSLH>, <&end_question>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        lh_hm_quick: lh_hm_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LH_HM_QUICK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <34 38 33 32>;
        };

        ad_z: adaptive_z {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_Z";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp O>,
                <&kp Y>,
                <&kp Y>,
                <&kp U>,
                <&kp Y>,
                <&kp S>,
                <&kp L>,
                <&kp K>,
                <&kp A>,
                <&kp Y>,
                <&str_ue>,
                <&kp L>,
                <&kp K>,
                <&str_ment>,
                <&kp E>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <A C D E G J K L O P Q R S T U Y>;
        };

        ad_b: adaptive_b {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_B";
            #binding-cells = <0>;
            defaults = <&kp B>;
            bindings =
                <&kp Y>,
                <&kp Y>,
                <&kp Y>,
                <&kp L>,
                <&kp K>,
                <&kp Y>,
                <&str_ue>,
                <&kp K>,
                <&str_ment>;

            max-delay-ms = <500>;
            antecedents = <C D G K L P Q S T>;
        };

        ad_m: adaptive_m {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_M";
            #binding-cells = <0>;
            defaults = <&kp M>;
            bindings = <&kp K>;
            max-delay-ms = <300>;
            antecedents = <C>;
        };

        ad_q: adaptive_q {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_Q";
            #binding-cells = <0>;
            defaults = <&kp Q>;
            bindings = <&str_efore>;
            max-delay-ms = <500>;
            antecedents = <B>;
        };

        ad_j: ad_j {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_J";
            #binding-cells = <0>;
            defaults = <&kp J>;
            bindings = <&kp P>, <&kp S>, <&kp Y>;

            max-delay-ms = <500>;
            antecedents = <M Y S>;
        };

        ad_z2: ad_z2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z2";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings = <&kp Y>, <&kp T>, <&kp Y>, <&kp S>;

            max-delay-ms = <300>;
            antecedents = <C P S Y>;
        };

        ad_k: ad_k {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_K";
            #binding-cells = <0>;
            defaults = <&kp K>;
            bindings = <&kp S>;
            max-delay-ms = <500>;
            antecedents = <Y>;
        };

        ad_z_maya: ad_z_maya {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z_MAYA";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp C>,
                <&kp E>,
                <&kp A>,
                <&kp S>,
                <&kp L>,
                <&kp Y>,
                <&kp Y>,
                <&kp Y>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <S U O G R F P H Y>;
        };

        ad_z_can2b2: ad_z_can2b2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Z_CAN2B2";
            #binding-cells = <0>;
            defaults = <&kp Z>;
            bindings =
                <&kp Y>,
                <&kp L>,
                <&kp K>,
                <&kp S>,
                <&kp S>,
                <&kp S>,
                <&kp M>,
                <&str_px>,
                <&kp H>,
                <&kp A>,
                <&kp E>,
                <&kp P>;

            max-delay-ms = <500>;
            antecedents = <C R L G W M S N P O U X>;
        };

        layer_switcher: layer_switcher {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_SWITCHER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        m_lbkt_minus: m_lbkt_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "M_LBKT_MINUS";
            bindings = <&kp LBKT>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI)>;
            keep-mods = <(MOD_RGUI)>;
        };

        m_rbkt_equal: m_rbkt_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "M_RBKT_EQUAL";
            bindings = <&kp RBKT>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI)>;
            keep-mods = <(MOD_RGUI)>;
        };

        m_sqt_minus: m_sqt_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SQT_MINUS";
            bindings = <&kp SQT>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LGUI|MOD_LALT)>;
            keep-mods = <(MOD_LSFT|MOD_LGUI)>;
        };

        m_comma_lt: m_comma_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "M_COMMA_LT";
            bindings = <&kp COMMA>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        m_dot_gt: m_dot_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "M_DOT_GT";
            bindings = <&kp DOT>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        ad_q_can2b2: ad_q_can2b2 {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AD_Q_CAN2B2";
            #binding-cells = <0>;
            defaults = <&kp Q>;
            bindings = <&kp L>, <&str_returns_q>;

            max-delay-ms = <500>;
            antecedents = <R L>;
        };
    };

    macros {
        end_sentence: end_sentence {
            compatible = "zmk,behavior-macro";
            label = "END_SENTENCE";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &quick_sk LSHFT>;
            wait-ms = <30>;
            tap-ms = <30>;
        };

        end_question: end_question {
            compatible = "zmk,behavior-macro";
            label = "END_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp QMARK &kp SPACE &quick_sk LSHFT>;
            wait-ms = <30>;
            tap-ms = <30>;
        };

        lang_switch: lang_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 3 &kp RA(SPACE)>;
            label = "LANG_SWITCH";
        };

        str_ment: str_ment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp E &kp N &kp T>;
            label = "STR_MENT";
            wait-ms = <40>;
            tap-ms = <4>;
        };

        str_efore: str_efore {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp F &kp O &kp R &kp E>;
            label = "STR_EFORE";
            wait-ms = <40>;
            tap-ms = <4>;
        };

        str_ue: str_ue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp E>;
            label = "STR_UE";
            wait-ms = <30>;
            tap-ms = <4>;
        };

        vim_nav_i: vim_nav_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 8 &kp I>;
            label = "VIM_NAV_I";
        };

        vim_nav_o: vim_nav_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 8 &kp O>;
            label = "VIM_NAV_O";
        };

        vim_nav_a: vim_nav_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 8 &kp A>;
            label = "VIM_NAV_A";
        };

        str_px: str_px {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp X>;
            label = "STR_PX";
            wait-ms = <30>;
            tap-ms = <4>;
        };

        vim_nav_5Cy: vim_nav_5Cy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5 &kp LC(Y)>;
            label = "VIM_NAV_5CY";
        };

        vim_nav_5Ce: vim_nav_5Ce {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5 &kp LC(E)>;
            label = "VIM_NAV_5CE";
        };

        str_returns_q: str_returns_q {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSPC &kp Q>;
            label = "STR_RETURNS_Q";
        };
    };

    combos {
        compatible = "zmk,combos";

        one_hand_mode {
            bindings = <&to 8>;
            key-positions = <37 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        canary2b2_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  :  |   BKSP    |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |    '      |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | SHFT(RET) |
            //              | LGUI   |  LWR/SPC  | RSE/ENT |   LSHFT/BKSP  | ALT |

            bindings = <
&kp C_PP             &kp Y           &lh_lt 5 L     &lh_lt 6 D        &kp W          &kp V               &kp X         &kp B           &kp O           &rh_lt 5 U     &kp COMMA       &m_rbkt_equal
&kp TAB              &lh_hm LCTRL C  &lh_hm LALT R  &lh_hm LSHFT T    &lh_hm LCMD S  &kp G               &kp P         &rh_hm RCMD N   &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I  &m_lbkt_minus
&layer_switcher 4 4  &ad_z_can2b2    &kp J          &kp K             &kp M          &kp F               &ad_q_can2b2  &kp H           &kp SQT         &kp SEMI       &kp DOT         &lang_switch
                                                    &layer_gresc 7 0  &lt 8 SPACE           &lt 5 ENTER                &mt RSHFT BSPC  &smart_shft
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        maya_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  :  |   BKSP    |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |    '      |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | SHFT(RET) |
            //              | LGUI   |  LWR/SPC  | RSE/ENT |   LSHFT/BKSP  | ALT |

            bindings = <
&kp C_PP             &kp B           &lh_lt 5 L     &lh_lt 6 D        &kp W          &ad_z_maya               &kp J  &kp F           &kp O           &rh_lt 5 U     &kp COMMA       &m_rbkt_equal
&kp TAB              &lh_hm LCTRL N  &lh_hm LALT R  &lh_hm LSHFT T    &lh_hm LCMD S  &kp G                    &kp P  &rh_hm RCMD H   &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I  &m_lbkt_minus
&layer_switcher 4 4  &kp Q           &kp X          &kp M             &kp C          &kp V                    &kp K  &kp Y           &kp SQT         &kp SEMI       &kp DOT         &lang_switch
                                                    &layer_gresc 7 0  &lt 8 SPACE                &lt 5 ENTER         &mt RSHFT BSPC  &smart_shft
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        vnmak3_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  :  |   BKSP    |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |    '      |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | SHFT(RET) |
            //              | LGUI   |  LWR/SPC  | RSE/ENT |   LSHFT/BKSP  | ALT |

            bindings = <
&kp C_PP  &kp T           &kp D          &lh_lt 6 C        &kp J          &kp Q               &kp DOT    &kp U           &kp E           &kp Y          &kp B           &trans
&kp TAB   &lh_hm LCTRL G  &lh_hm LALT H  &lh_hm LSHFT N    &lh_hm LCMD S  &kp R               &kp COMMA  &rh_hm RCMD I   &rh_hm RSHFT A  &rh_hm RALT O  &rh_hm RCTRL W  &trans
&trans    &kp L           &kp M          &kp V             &kp X          &kp F               &kp Z      &kp SEMI        &kp SQT         &kp P          &kp K           &trans
                                         &layer_gresc 7 0  &lt 8 SPACE           &lt 5 ENTER             &mt RSHFT BSPC  &smart_shft
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        qwerty_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  :  |   BKSP    |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |    '      |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | SHFT(RET) |
            //              | LGUI   |  LWR/SPC  | RSE/ENT |   LSHFT/BKSP  | ALT |

            bindings = <
&kp C_PP  &kp Q  &kp W  &lh_lt 6 E        &kp R        &kp T               &kp Y  &kp U           &kp I        &kp O    &kp P     &none
&kp TAB   &kp A  &kp S  &kp D             &kp F        &kp G               &kp H  &kp J           &kp K        &kp L    &kp SEMI  &kp SQT
&trans    &kp Z  &kp X  &kp C             &kp V        &kp B               &kp N  &kp M           &kp COMMA    &kp DOT  &kp FSLH  &trans
                        &layer_gresc 7 0  &lt 8 SPACE         &lt 5 ENTER         &mt RSHFT BSPC  &smart_shft
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        vim_nav_layer {
            bindings = <
&none   &sk LS(LA(LC(LCMD)))  &sk LC(LCMD)  &mo 6      &none      &none           &vim_nav_5Ce  &kp LC(D)  &kp LC(U)  &vim_nav_5Cy  &none  &none
&none   &sk LCTRL             &sk LALT      &sk LSHFT  &sk LCMD   &none           &kp H         &kp J      &kp K      &kp L         &none  &none
&trans  &none                 &none         &none      &none      &none           &kp LEFT      &kp DOWN   &kp UP     &kp RIGHT     &none  &none
                                            &kp ESC    &kp SPACE         &kp RET                &kp BSPC   &kp DEL
            >;
        };

        code_sym_layer {
            bindings = <
&none   &kp GRAVE          &kp LT           &kp GT             &kp FSLH           &kp DOT          &kp PIPE   &kp TILDE          &kp LBKT           &kp RBKT          &kp AT              &trans
&none   &lh_hm LCTRL EXCL  &lh_hm LALT DQT  &lh_hm LSHFT PLUS  &lh_hm LCMD EQUAL  &kp HASH         &kp AMPS   &rh_hm RCMD COLON  &rh_hm RSHFT LPAR  &rh_hm RALT RPAR  &rh_hm RCTRL QMARK  &none
&trans  &kp BSLH           &kp SQT          &kp UNDER          &kp MINUS          &kp STAR         &kp CARET  &kp DLLR           &kp LBRC           &kp RBRC          &kp PRCNT           &none
                                            &none              &kp SPACE                    &mo 5             &kp BSPC           &kp DEL
            >;
        };

        num_layer {
            bindings = <
&none   &kp LT     &kp MINUS  &none      &kp PLUS   &kp GT            &kp COLON  &kp N7    &kp N8   &kp N9  &kp ASTRK  &kp PLUS
&to 0   &sk LCTRL  &sk LALT   &sk LSHFT  &sk LCMD   &none             &kp N0     &kp N1    &kp N2   &kp N3  &kp FSLH   &kp MINUS
&trans  &none      &none      &none      &none      &none             &kp EQUAL  &kp N4    &kp N5   &kp N6  &kp DOT    &none
                              &kp MINUS  &kp SPACE          &kp PLUS             &kp BSPC  &kp DEL
            >;
        };

        fun_layer {
            bindings = <
&none   &none      &none      &kp LG(BSLH)  &kp LS(LG(N4))  &kp LS(LG(N5))         &kp F12  &kp F7  &kp F8  &kp F9  &kp LG(LBKT)  &none
&none   &kp LG(A)  &none      &none         &none           &kp LG(BSLH)           &kp F11  &kp F1  &kp F2  &kp F3  &kp LG(RBKT)  &none
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)     &kp LG(V)       &kp LG(LS(Z))          &kp F10  &kp F4  &kp F5  &kp F6  &kp LG(BSLH)  &kp LC(LG(Q))
                              &to 0         &none                           &none           &none   &mo 9
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |    |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
            // |    |  -  |  =  |  [  |  ]  |  \  |   | F1  | F2  | F3  | F4  | F5  | F6  |
            // |    | ESC | GUI | ALT | CAPS|  "  |   | F7  | F8  | F9  | F10 | F11 | F12 |
            //                       |     | ADJ | BKSP |    |     |

            bindings = <
&none    &sk RC(RA(RS(RGUI)))  &sk LC(LCMD)  &none      &kp LG(A)  &kp LG(LBKT)              &kp LS(HOME)  &vim_nav_5Ce  &vim_nav_5Cy  &kp LS(END)  &vim_nav_o  &none
&kp TAB  &sk LCTRL             &sk LALT      &sk LSHFT  &sk LCMD   &kp LG(RBKT)              &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT    &vim_nav_i  &none
&trans   &kp LG(Z)             &kp LG(X)     &kp LG(C)  &kp LG(V)  &kp LS(LG(Z))             &kp HOME      &kp PG_DN     &kp PG_UP     &kp END      &vim_nav_a  &trans
                                             &kp ESC    &kp SPACE                 &kp ENTER                &kp BSPC      &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        sys_layer {
            // -----------------------------------------------------------------------------------------
            // | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5 | BT CLR |
            // | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI- |    |         |   |       |     |     |     |     |        |
            // |          |          |          |          |    |         |   |       |     |     |     |     |        |
            //                                              |     |     |     |     |     |

            bindings = <
&none  &none   &none   &none   &none         &none                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR  &kp LG(LC(Q))
&to 0  &none   &none   &none   &none         &none                &none         &none         &none         &none         &none       &none
&none  &tog 1  &tog 2  &tog 3  &out OUT_USB  &out OUT_BLE         &bootloader   &none         &none         &none         &none       &kp LC(LG(Q))
                       &to 0   &none                       &none                &none         &none
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN>;
        };
    };
};
