/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define CMK 0
#define SMK 1
#define QWT 2
#define LOWER 3
#define RAISE 4
#define ADJUST 5

&mt { quick-tap-ms = <150>; };

&sl { /delete-property/ quick-release; };

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>; };

/ {
    behaviors {
        lh_hm: lh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <60>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 39 38 37 36>;
        };

        rh_hm: rh_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <60>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 40 39>;
            hold-trigger-on-release;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHFT";
            bindings = <&quick_sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        quick_sk: quick_sk {
            compatible = "zmk,behavior-sticky-key";
            label = "QUICK_STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <900>;
            quick-release;
        };

        quick_hold_tap: quick_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_HOLD_TAP";
            bindings = <&quick_sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "balanced";
        };

        lh_lt: lh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 36 37 38>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        rh_lt: rh_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_layer_tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
        };

        grave_escape: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_RSFT)>;
            mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RSFT|MOD_LALT|MOD_RCTL)>;
        };

        layer_gresc: layer_gresc {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_GRESC";
            bindings = <&mo>, <&grave_escape>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        lh_hm_quick: lh_hm_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LH_HM_QUICK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <34 38 33 32>;
        };

        layer_switcher: layer_switcher {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_SWITCHER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        m_lang_switch_equal: m_lang_switch_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "M_LANG_SWITCH_EQUAL";
            bindings = <&lang_switch>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI|MOD_LGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        m_dot_dqt: m_dot_dqt {
            compatible = "zmk,behavior-mod-morph";
            label = "M_DOT_DQT";
            bindings = <&kp DOT>, <&kp DQT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
    };

    macros {
        lang_switch: lang_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 3 &kp RA(SPACE)>;
            label = "LANG_SWITCH";
        };
    };

    combos {
        compatible = "zmk,combos";

        sym_minus {
            bindings = <&kp MINUS>;
            key-positions = <37 28>;
        };

        sym_underscore {
            bindings = <&kp UNDER>;
            key-positions = <37 27>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        maya_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  :  |   BKSP    |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |    '      |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | SHFT(RET) |
            //              | LGUI   |  LWR/SPC  | RSE/ENT |   LSHFT/BKSP  | ALT |

            bindings = <
&kp LBKT             &kp B           &lh_lt 6 L     &lh_lt 5 D        &kp W          &kp Q             &kp APOS  &kp F           &kp O           &rh_lt 6 U     &kp J           &kp RBKT
&kp MINUS            &lh_hm LCTRL N  &lh_hm LALT R  &lh_hm LSHFT T    &lh_hm LCMD S  &kp G             &kp K     &rh_hm RCMD H   &rh_hm RSHFT A  &rh_hm RALT E  &rh_hm RCTRL I  &kp SEMI
&layer_switcher 4 4  &kp Z           &kp X          &kp M             &kp C          &kp V             &kp P     &kp Y           &m_dot_dqt      &kp FSLH       &kp COMMA       &m_lang_switch_equal
                                                    &layer_gresc 8 0  &lt 9 SPACE           &lt 4 RET            &mt RSHFT BSPC  &lt 10 TAB
            >;
        };

        stirred_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  :  |   BKSP    |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |    '      |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | SHFT(RET) |
            //              | LGUI   |  LWR/SPC  | RSE/ENT |   LSHFT/BKSP  | ALT |

            bindings = <
&kp LBKT             &kp COMMA       &lh_lt 6 U     &lh_lt 5 O        &kp F          &kp X             &kp P  &kp C           &kp L           &rh_lt 6 M     &kp V           &kp RBKT
&kp MINUS            &lh_hm LCTRL I  &lh_hm LALT E  &lh_hm LSHFT A    &lh_hm LCMD N  &kp B             &kp Y  &rh_hm RCMD D   &rh_hm RSHFT R  &rh_hm RALT T  &rh_hm RCTRL S  &kp SEMI
&layer_switcher 4 4  &kp DOT         &kp FSLH       &kp SQT           &kp H          &kp Q             &kp W  &kp G           &kp J           &kp K          &kp Z           &m_lang_switch_equal
                                                    &layer_gresc 8 0  &lt 9 SPACE           &lt 6 RET         &mt RSHFT BSPC  &lt 10 TAB
            >;
        };

        vnmak3_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  :  |   BKSP    |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |    '      |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | SHFT(RET) |
            //              | LGUI   |  LWR/SPC  | RSE/ENT |   LSHFT/BKSP  | ALT |

            bindings = <
&trans   &kp T           &kp D          &lh_lt 5 C        &kp J          &kp Q              &kp DOT    &kp U           &kp E           &kp Y          &kp B           &trans
&kp TAB  &lh_hm LCTRL G  &lh_hm LALT H  &lh_hm LSHFT N    &lh_hm LCMD S  &kp R              &kp COMMA  &rh_hm RCMD I   &rh_hm RSHFT A  &rh_hm RALT O  &rh_hm RCTRL W  &trans
&trans   &kp L           &kp M          &kp V             &kp X          &kp F              &kp Z      &kp SEMI        &kp SQT         &kp P          &kp K           &trans
                                        &layer_gresc 8 0  &lt 9 SPACE           &lt 10 RET             &mt RSHFT BSPC  &smart_shft
            >;
        };

        qwerty_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  :  |   BKSP    |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |    '      |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | SHFT(RET) |
            //              | LGUI   |  LWR/SPC  | RSE/ENT |   LSHFT/BKSP  | ALT |

            bindings = <
&trans   &kp Q  &lh_lt 6 W  &lh_lt 5 E        &kp R        &kp T                 &kp Y  &kp U           &kp I      &rh_lt 6 O  &kp P     &trans
&kp TAB  &kp A  &kp S       &kp D             &kp F        &kp G                 &kp H  &kp J           &kp K      &kp L       &kp SEMI  &kp SQT
&trans   &kp Z  &kp X       &kp C             &kp V        &kp B                 &kp N  &kp M           &kp COMMA  &kp DOT     &kp FSLH  &trans
                            &layer_gresc 8 0  &lt 9 SPACE         &mt LCTRL RET         &mt RSHFT BSPC  &kp TAB
            >;
        };

        vim_nav_layer {
            bindings = <
&none   &sk LG(LCTRL)  &sk LG(LALT)  &mo 5        &none      &none              &kp LC(E)  &kp LC(D)  &kp LC(U)  &kp LC(Y)  &none  &none
&none   &sk LCTRL      &sk LALT      &smart_shft  &sk LCMD   &kp CAPS           &kp H      &kp J      &kp K      &kp L      &none  &none
&trans  &none          &none         &none        &none      &none              &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none  &kp LC(LG(Q))
                                     &kp ESC      &kp SPACE            &kp RET             &kp BSPC   &kp DEL
            >;
        };

        num_layer {
            bindings = <
&trans  &none      &lt 6 FSLH      &none      &kp STAR       &none           &none  &kp N7    &kp N8   &kp N9  &kp COMMA  &none
&to 0   &sk LCTRL  &mt LALT MINUS  &sk LSHFT  &mt LCMD PLUS  &none           &none  &kp N1    &kp N2   &kp N3  &kp N0     &none
&trans  &none      &none           &none      &none          &none           &none  &kp N4    &kp N5   &kp N6  &kp DOT    &none
                                   &kp ESC    &kp SPACE             &kp RET         &kp BSPC  &kp DEL
            >;
        };

        sym_layer {
            bindings = <
&trans     &kp GRAVE          &kp LT           &lt 7 GT           &kp FSLH           &kp DOT          &kp PIPE   &kp TILDE          &kp LBKT           &kp RBKT          &kp AT              &trans
&kp MINUS  &lh_hm LCTRL EXCL  &lh_hm LALT DQT  &lh_hm LSHFT PLUS  &lh_hm LCMD EQUAL  &kp HASH         &kp AMPS   &rh_hm RCMD COLON  &rh_hm RSHFT LPAR  &rh_hm RALT RPAR  &rh_hm RCTRL PRCNT  &none
&trans     &kp BSLH           &kp BSLH         &kp UNDER          &kp MINUS          &kp STAR         &kp CARET  &kp DLLR           &kp LBRC           &kp RBRC          &kp QMARK           &none
                                               &none              &kp SPACE                    &mo 6             &kp BSPC           &kp DEL
            >;
        };

        light_num {
            bindings = <
&none  &none  &none  &none  &none  &none         &none   &kp N7  &kp N8  &kp N9  &none  &none
&none  &none  &none  &none  &none  &none         &none   &kp N4  &kp N5  &kp N6  &none  &none
&none  &none  &none  &none  &none  &none         &kp N0  &kp N1  &kp N2  &kp N3  &none  &none
                     &none  &none         &none          &none   &none
            >;
        };

        fun_layer {
            bindings = <
&trans  &none      &none      &kp LG(BSLH)  &kp LS(LG(N4))  &kp LS(LG(N5))         &kp F12  &kp F7  &kp F8  &kp F9  &kp LG(LBKT)  &trans
&none   &kp LG(A)  &none      &none         &none           &kp LG(BSLH)           &kp F11  &kp F4  &kp F5  &kp F6  &kp LG(RBKT)  &none
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)     &kp LG(V)       &kp LG(LS(Z))          &kp F10  &kp F1  &kp F2  &kp F3  &kp LG(BSLH)  &kp LC(LG(Q))
                              &to 0         &none                           &none           &none   &mo 10
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |    |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
            // |    |  -  |  =  |  [  |  ]  |  \  |   | F1  | F2  | F3  | F4  | F5  | F6  |
            // |    | ESC | GUI | ALT | CAPS|  "  |   | F7  | F8  | F9  | F10 | F11 | F12 |
            //                       |     | ADJ | BKSP |    |     |

            bindings = <
&trans   &sk RC(RA(RS(RGUI)))  &sk LC(LCMD)  &none        &kp LG(A)  &kp LG(LBKT)              &kp LS(HOME)  &kp LC(E)  &kp LC(Y)  &kp LS(END)  &none  &trans
&kp TAB  &sk LCTRL             &sk LALT      &smart_shft  &sk LCMD   &kp LG(RBKT)              &kp LEFT      &kp DOWN   &kp UP     &kp RIGHT    &none  &none
&trans   &kp LG(Z)             &kp LG(X)     &kp LG(C)    &kp LG(V)  &kp LS(LG(Z))             &kp HOME      &kp PG_DN  &kp PG_UP  &kp END      &none  &trans
                                             &kp ESC      &kp SPACE                 &kp ENTER                &kp BSPC   &kp DEL
            >;
        };

        sys_layer {
            // -----------------------------------------------------------------------------------------
            // | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5 | BT CLR |
            // | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI- |    |         |   |       |     |     |     |     |        |
            // |          |          |          |          |    |         |   |       |     |     |     |     |        |
            //                                              |     |     |     |     |     |

            bindings = <
&trans  &none   &none   &none   &none         &none                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR  &trans
&to 0   &none   &none   &none   &none         &none                &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP      &none       &none
&none   &tog 1  &tog 2  &tog 3  &out OUT_USB  &out OUT_BLE         &bootloader   &none         &none         &none         &none       &kp LC(LG(Q))
                        &to 0   &none                       &none                &none         &none
            >;
        };
    };
};
